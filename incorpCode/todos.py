# ESTE C√ìDIGO ELE EXTRAI DADOS DE INCORPORA√á√ÉO IMOBILI√ÅRIA DE APARTAMENTOS (BLOCO E TORRE) E DE CASA
# PARA APARTAMENTOS DE TORRE, ESSE √â O PADR√ÉO: Apartamento 001, tipo A, da Torre 01, 
# PARA APARTAMENTOS DE BLOCO, ESSE √â O PADR√ÉO: APARTAMENTO 001 ‚Äì BLOCO 01

import re
import pandas as pd
import streamlit as st
from docx import Document
from io import BytesIO

st.title("Extrator de Dados de Memorial de Incorpora√ß√£o")

uploaded_file = st.file_uploader("Envie um arquivo .docx", type="docx")

def identificar_tipo_documento(texto):
    if re.search(r"Apartamento\s+\d+,\s+tipo\s+[A-Z],\s+da\s+Torre", texto, re.IGNORECASE):
        return "torre"
    elif re.search(r"Apartamento\s+\d+\s*[-‚Äì]\s*Bloco\s+\d+", texto, re.IGNORECASE):
        return "bloco"
    elif re.search(r"(?:CASA|Casa)[ \n]?[Nn]?[¬∞¬∫]?[ ]?\d{2}", texto):
        return "casa"
    return "desconhecido"

def extrair_torre(doc):
    dados = []
    texto_completo = "\n".join([p.text for p in doc.paragraphs])

    regex_torre = re.compile(
        r"Apartamento\s+(\d+),\s+tipo\s+([A-Z]),\s+da\s+Torre\s+(\d+).*?"
        r"√°rea privativa principal de ([\d,]+)m¬≤.*?"
        r"(?:√°rea privativa acess√≥ria de [\d,]+m¬≤.*?)?"
        r"√°rea privativa total de ([\d,]+)m¬≤.*?"
        r"√°rea de uso comum de ([\d,]+)m¬≤.*?"
        r"√°rea real total de ([\d,]+)m¬≤.*?"
        r"fra√ß√£o ideal.*?de ([\d,]+).*?ou ([\d,]+)m¬≤",
        re.DOTALL | re.IGNORECASE
    )

    for p in doc.paragraphs:
        texto = p.text.strip()
        match = regex_torre.search(texto)
        if match:
            numero, tipo, torre, privativa, total, comum, real, fracao, terreno = match.groups()
            # Encontrar a descri√ß√£o de 'localizado' at√© o √∫ltimo ponto final
            idx_localizado = texto.lower().find('localizado')
            idx_ultimo_ponto = texto.rfind('.')
            descricao = ""
            if idx_localizado != -1 and idx_ultimo_ponto != -1 and idx_ultimo_ponto > idx_localizado:
                descricao = texto[idx_localizado:idx_ultimo_ponto+1].replace('\n', ' ').strip()
            dados.append({
                "Formato": "Torre",
                "Apartamento": numero,
                "Tipo": tipo,
                "Torre/Bloco": torre,
                "√Årea Privativa (m¬≤)": privativa.replace(",", "."),
                "√Årea Comum (m¬≤)": comum.replace(",", "."),
                "√Årea Total (m¬≤)": real.replace(",", "."),
                "Fra√ß√£o Ideal (%)": fracao.replace(",", "."),
                "√Årea Terreno (m¬≤)": terreno.replace(",", "."),
                "Descri√ß√£o": descricao
            })
    return pd.DataFrame(dados)

def extrair_bloco(doc):
    dados = []
    # Padr√£o 1: APARTAMENTO 001 ‚Äì BLOCO 01: Localizado ...
    regex_bloco1 = re.compile(
        r"APARTAMENTO\s+(\d+)\s*[-‚Äì]\s*BLOCO\s+(\d+):?", re.IGNORECASE
    )
    # Padr√£o 2: Apartamento 001, TIPO A, do Bloco 01, localizado ...
    regex_bloco2 = re.compile(
        r"Apartamento\s+(\d+),\s*TIPO\s*([A-Z]),\s*do\s*Bloco\s+(\d+),", re.IGNORECASE
    )
    for p in doc.paragraphs:
        texto = p.text.strip()
        # Tenta padr√£o 2 primeiro (mais espec√≠fico)
        match2 = regex_bloco2.search(texto)
        if match2:
            numero, tipo, bloco = match2.groups()
            # Descri√ß√£o: de 'localizado' ou 'assim descrito:' at√© o √∫ltimo ponto final
            idx_localizado = texto.lower().find('localizado')
            idx_assim_descrito = texto.lower().find('assim descrito:')
            idx_inicio = idx_localizado if idx_localizado != -1 else idx_assim_descrito
            idx_ultimo_ponto = texto.rfind('.')
            descricao = ""
            if idx_inicio != -1 and idx_ultimo_ponto != -1 and idx_ultimo_ponto > idx_inicio:
                descricao = texto[idx_inicio:idx_ultimo_ponto+1].replace('\n', ' ').strip()
            # Extrair √°reas (padr√£o novo)
            regex_areas2 = re.compile(
                r"√Åreas:\s*√°rea privativa principal de ([\d,.]+)m¬≤.*?"
                r"√°rea privativa total de ([\d,.]+)m¬≤.*?"
                r"√°rea de uso comum de ([\d,.]+)m¬≤.*?"
                r"√°rea real total de ([\d,.]+)m¬≤.*?"
                r"fra√ß√£o ideal de solo de ([\d,.]+).*?ou ([\d,.]+)m¬≤",
                re.DOTALL | re.IGNORECASE
            )
            match_areas2 = regex_areas2.search(texto)
            if match_areas2:
                privativa, total, comum, real, fracao, terreno = match_areas2.groups()
                dados.append({
                    "Formato": "Bloco",
                    "Apartamento": numero,
                    "Tipo": tipo,
                    "Torre/Bloco": bloco,
                    "√Årea Privativa (m¬≤)": privativa.replace(",", "."),
                    "√Årea Comum (m¬≤)": comum.replace(",", "."),
                    "√Årea Total (m¬≤)": real.replace(",", "."),
                    "Fra√ß√£o Ideal (%)": fracao.replace(",", "."),
                    "√Årea Terreno (m¬≤)": terreno.replace(",", "."),
                    "Descri√ß√£o": descricao
                })
            continue
        # Tenta padr√£o 1
        match1 = regex_bloco1.search(texto)
        if match1:
            numero, bloco = match1.groups()
            tipo = ""
            # Descri√ß√£o: de 'localizado' at√© o √∫ltimo ponto final
            idx_localizado = texto.lower().find('localizado')
            idx_ultimo_ponto = texto.rfind('.')
            descricao = ""
            if idx_localizado != -1 and idx_ultimo_ponto != -1 and idx_ultimo_ponto > idx_localizado:
                descricao = texto[idx_localizado:idx_ultimo_ponto+1].replace('\n', ' ').strip()
            # Extrair √°reas (padr√£o antigo)
            regex_areas1 = re.compile(
                r"√°reas:\s*privativa real de ([\d,]+)m¬≤,\s*"
                r"√°rea de uso comum real de ([\d,]+)m¬≤,\s*"
                r"perfazendo uma √°rea total real de ([\d,]+)m¬≤.*?"
                r"√°rea equivalente de constru√ß√£o igual a ([\d,]+)m¬≤.*?"
                r"fra√ß√£o ideal.*?([0-9,.]+)%",
                re.DOTALL | re.IGNORECASE
            )
            match_areas1 = regex_areas1.search(texto)
            if match_areas1:
                privativa, comum, total, equivalente, fracao = match_areas1.groups()
                dados.append({
                    "Formato": "Bloco",
                    "Apartamento": numero,
                    "Tipo": tipo,
                    "Torre/Bloco": bloco,
                    "√Årea Privativa (m¬≤)": privativa.replace(",", "."),
                    "√Årea Comum (m¬≤)": comum.replace(",", "."),
                    "√Årea Total (m¬≤)": total.replace(",", "."),
                    "Fra√ß√£o Ideal (%)": fracao.replace(",", "."),
                    "√Årea Terreno (m¬≤)": equivalente.replace(",", "."),
                    "Descri√ß√£o": descricao
                })
    return pd.DataFrame(dados)

def extrair_casas(doc):
    texto = "\n".join([p.text.strip() for p in doc.paragraphs if p.text.strip()])
    blocos = re.split(r"(?:^|\n)(?:CASA|Casa)[ \n]?[Nn]?[¬∞¬∫]?[ ]?(\d{2})", texto)
    casas = [(blocos[i], blocos[i + 1]) for i in range(1, len(blocos), 2)]

    regex_area_terreno = re.compile(r"configura√ß√£o.*?√°rea total de *(\d+,\d+)")
    regex_area_construida = re.compile(r"√°rea total constru√≠da da casa de *(\d+,\d+)")
    regex_area_comum = re.compile(r"√°rea de uso comum real de *(\d+,\d+)")
    regex_area_total_real = re.compile(r"√°rea total real de *(\d+,\d+)")
    regex_fracao_ideal = re.compile(r"fra√ß√£o ideal do terreno correspondente a *(\d+,\d+)\s?%")

    dados = []
    for numero, conteudo in casas:
        area_terreno = re.search(regex_area_terreno, conteudo)
        area_construida = re.search(regex_area_construida, conteudo)
        area_comum = re.search(regex_area_comum, conteudo)
        area_total = re.search(regex_area_total_real, conteudo)
        fracao = re.search(regex_fracao_ideal, conteudo)
        # Descri√ß√£o: de 'frente' at√© o √∫ltimo ponto final
        idx_frente = conteudo.lower().find('frente')
        idx_ultimo_ponto = conteudo.rfind('.')
        descricao = ""
        if idx_frente != -1 and idx_ultimo_ponto != -1 and idx_ultimo_ponto > idx_frente:
            descricao = conteudo[idx_frente:idx_ultimo_ponto+1].replace('\n', ' ').strip()
        dados.append({
            "N√∫mero da Casa": numero,
            "√Årea do Terreno (m¬≤)": area_terreno.group(1) if area_terreno else "",
            "√Årea Constru√≠da (m¬≤)": area_construida.group(1) if area_construida else "",
            "√Årea Comum Real (m¬≤)": area_comum.group(1) if area_comum else "",
            "√Årea Total Real (m¬≤)": area_total.group(1) if area_total else "",
            "Fra√ß√£o Ideal": (fracao.group(1) + " %") if fracao else "",
            "Descri√ß√£o": descricao
        })

    return pd.DataFrame(dados)

if uploaded_file:
    doc = Document(uploaded_file)
    texto_completo = "\n".join(p.text for p in doc.paragraphs)
    tipo = identificar_tipo_documento(texto_completo)

    if tipo == "torre":
        df = extrair_torre(doc)
    elif tipo == "bloco":
        df = extrair_bloco(doc)
    elif tipo == "casa":
        df = extrair_casas(doc)
    else:
        st.warning("Tipo de documento n√£o reconhecido.")
        st.stop()

    st.success(f"Documento identificado como: {tipo.upper()}")
    st.dataframe(df)

    buffer = BytesIO()
    df.to_excel(buffer, index=False)
    buffer.seek(0)

    st.download_button(
        label="üì• Baixar Excel",
        data=buffer,
        file_name=f"dados_{tipo}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
